{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import statements\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.cluster import KMeans\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in datasets; change directory as needed\n",
    "\n",
    "dir = \"C:\\\\Users\\\\Xirailuyo\\\\Documents\\\\Wells Fargo\\\\\"\n",
    "df = pd.read_excel(dir + \"Data.xlsx\", \"Individuals\")\n",
    "rates = pd.read_excel(dir + \"Data.xlsx\", \"Carbon Footprint\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Indnum</th>\n",
       "      <th>Group</th>\n",
       "      <th>Activity</th>\n",
       "      <th>Units</th>\n",
       "      <th>Consumption</th>\n",
       "      <th>Quality_of_Life_Importance__1_10</th>\n",
       "      <th>solar_powered__water_heater</th>\n",
       "      <th>gas_water_heater</th>\n",
       "      <th>electric_water_heater___peak_hou</th>\n",
       "      <th>electric_water_heater___off_peak</th>\n",
       "      <th>gas</th>\n",
       "      <th>natural_gas</th>\n",
       "      <th>hybrid</th>\n",
       "      <th>electric___peak_hours</th>\n",
       "      <th>electric___off_peak_hours</th>\n",
       "      <th>jetfuel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Household heating =&gt; 70F</td>\n",
       "      <td>hours</td>\n",
       "      <td>2.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Household heating &lt; 70F</td>\n",
       "      <td>hours</td>\n",
       "      <td>10.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Use of heat pump (negative CF)</td>\n",
       "      <td>hours</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Use of air conditioner</td>\n",
       "      <td>hours</td>\n",
       "      <td>20.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>shower - short</td>\n",
       "      <td>count</td>\n",
       "      <td>5.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Indnum  Group                        Activity  Units  Consumption  \\\n",
       "0       1      1        Household heating => 70F  hours          2.0   \n",
       "1       1      1         Household heating < 70F  hours         10.0   \n",
       "2       1      1  Use of heat pump (negative CF)  hours          NaN   \n",
       "3       1      1          Use of air conditioner  hours         20.0   \n",
       "4       1      2                  shower - short  count          5.0   \n",
       "\n",
       "   Quality_of_Life_Importance__1_10  solar_powered__water_heater  \\\n",
       "0                              88.0                          NaN   \n",
       "1                              85.0                          1.0   \n",
       "2                              50.0                          NaN   \n",
       "3                              45.0                          NaN   \n",
       "4                              98.0                          NaN   \n",
       "\n",
       "   gas_water_heater  electric_water_heater___peak_hou  \\\n",
       "0               NaN                               NaN   \n",
       "1               1.0                               NaN   \n",
       "2               NaN                               NaN   \n",
       "3               NaN                               NaN   \n",
       "4               NaN                               NaN   \n",
       "\n",
       "   electric_water_heater___off_peak  gas  natural_gas  hybrid  \\\n",
       "0                               NaN  NaN          1.0     NaN   \n",
       "1                               NaN  NaN          1.0     NaN   \n",
       "2                               NaN  NaN          NaN     NaN   \n",
       "3                               NaN  NaN          NaN     NaN   \n",
       "4                               NaN  NaN          NaN     NaN   \n",
       "\n",
       "   electric___peak_hours  electric___off_peak_hours  jetfuel  \n",
       "0                    NaN                        NaN      NaN  \n",
       "1                    NaN                        NaN      NaN  \n",
       "2                    NaN                        NaN      NaN  \n",
       "3                    NaN                        NaN      NaN  \n",
       "4                    NaN                        NaN      NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for understanding initial dataset\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "# search for unneeded conversion rates (when: False)\n",
    "\n",
    "acts = df.Activity.unique() # array of all activities\n",
    "    \n",
    "# going through every activity and determining what energy sources are used\n",
    "for i in acts:\n",
    "    # print(i + \":\\n\")\n",
    "    iByActs = df.loc[df[\"Activity\"] == i] # index by activities\n",
    "    # print(iByActs.notnull().any())\n",
    "    # print(\"\\n---\\n\")\n",
    "    \n",
    "# calculations were done by hand on separate sheet as the equations varied fairly frequently"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a new subset was created when an energy source wasn't given\n",
    "NaNSubset = df.loc[df[\"Consumption\"]>0, \"solar_powered__water_heater\":]\n",
    "length = len(NaNSubset.index) #length of new subset\n",
    "\n",
    "# create an index based on rows without listed energy sources\n",
    "indices = []\n",
    "for i in range(length):\n",
    "    exists = NaNSubset.iloc[i,:].notnull().any() # value exists for row\n",
    "    if (not exists):\n",
    "        indices.append(NaNSubset.index[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inx</th>\n",
       "      <th>solar_powered__water_heater</th>\n",
       "      <th>gas_water_heater</th>\n",
       "      <th>electric_water_heater___peak_hou</th>\n",
       "      <th>electric_water_heater___off_peak</th>\n",
       "      <th>gas</th>\n",
       "      <th>natural_gas</th>\n",
       "      <th>hybrid</th>\n",
       "      <th>electric___peak_hours</th>\n",
       "      <th>electric___off_peak_hours</th>\n",
       "      <th>jetfuel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    inx  solar_powered__water_heater  gas_water_heater  \\\n",
       "3     3                          NaN               NaN   \n",
       "4     4                          NaN               NaN   \n",
       "5     5                          NaN               NaN   \n",
       "9     9                          NaN               NaN   \n",
       "10   10                          NaN               NaN   \n",
       "\n",
       "    electric_water_heater___peak_hou  electric_water_heater___off_peak  gas  \\\n",
       "3                                NaN                               NaN  NaN   \n",
       "4                                NaN                               NaN  NaN   \n",
       "5                                NaN                               NaN  NaN   \n",
       "9                                NaN                               NaN  NaN   \n",
       "10                               NaN                               NaN  NaN   \n",
       "\n",
       "    natural_gas  hybrid  electric___peak_hours  electric___off_peak_hours  \\\n",
       "3           NaN     NaN                    NaN                        NaN   \n",
       "4           NaN     NaN                    NaN                        NaN   \n",
       "5           NaN     NaN                    NaN                        NaN   \n",
       "9           NaN     NaN                    NaN                        NaN   \n",
       "10          NaN     NaN                    NaN                        NaN   \n",
       "\n",
       "    jetfuel  \n",
       "3       NaN  \n",
       "4       NaN  \n",
       "5       NaN  \n",
       "9       NaN  \n",
       "10      NaN  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shows new datasets is full of NaN values\n",
    "NaNSubset['inx'] = NaNSubset.index\n",
    "NaNSubset = NaNSubset.loc[NaNSubset[\"inx\"].isin(indices),:]\n",
    "NaNSubset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# revising rates dataset for easier use\n",
    "rates.columns = rates.iloc[0]\n",
    "rates = rates.drop(rates.index[0])\n",
    "rates.head()\n",
    "\n",
    "# adjust rates columns to match the individuals sheet\n",
    "revRates = rates[['Activity', 'solar powered  water heater', 'gas water heater', 'electric water heater - peak hours', 'electric water heater - off peak hours',\n",
    "              'gas', 'natural gas', 'hybrid', 'electric - peak hours', 'electric - off peak hours', 'Jet Fuel']]\n",
    "\n",
    "# move index column to first column in NaNSubset so column index is the same\n",
    "NaNCol = list(NaNSubset)\n",
    "NaNCol.insert(0,NaNCol[-1])\n",
    "NaNCol.pop(-1)\n",
    "NaNSubset = NaNSubset[NaNCol]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Use of air conditioner', 'shower - short',\n",
       "       'shower - long (> 3 min)', 'use of clothes washer',\n",
       "       'use of clothes dryer', 'use of  oven',\n",
       "       'use of self-clean feature of electric oven', 'TV/computer use',\n",
       "       'air travel - large plane',\n",
       "       'trips using public ground transportation',\n",
       "       'bags of garbage disposed',\n",
       "       'bags of compost deposited (negative CF)', 'large items disposed',\n",
       "       'wash-up', 'use of dishwasher',\n",
       "       'Small kitchen applicance in the home', 'use of cooking range',\n",
       "       'hazardous or electic items disposed', 'bath',\n",
       "       'air travel - small  plane (<50 seats)',\n",
       "       'bags of recylce disposited (negative CF)'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# showing that most activities have instances without power sources\n",
    "test = df.iloc[indices,:]\n",
    "test[\"Activity\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\" When there isn't a listed powersource, every powersource that\\nhas precedent for use by the activity is marked. That way a shower\\ndoesn't use jet fuel, but all possibilities are still accounted for\\n\""
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Explaining the following code selections\n",
    "\"\"\" \n",
    "When there isn't a listed powersource, every powersource that has\n",
    "precedent for use by the activity is marked. That way a shower\n",
    "doesn't use jet fuel, but all possibilities are still accounted for\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Activities 1-2: Columns 1-8 | Don't include off peak hours for electric\n",
    "# revRates.iloc[0:2,:]\n",
    "# for i in indices:\n",
    "#     row = df.iloc[i,:]\n",
    "#     if (row[\"Activity\"]==\"Household heating => 70F\" or row[\"Activity\"]==\"Household heating < 70F\"):\n",
    "#         print(\"test\")\n",
    "#         for j in range(6,15):\n",
    "#             df.iloc[i,j]=1\n",
    "#             print(df.iloc[i,j])\n",
    "            \n",
    "# Household Heating is always accounted for as shown in previous panel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Activities 3-10\n",
    "group2 = revRates.iloc[2:10,:]\n",
    "group2list = group2[\"Activity\"].tolist()\n",
    "for i in range(4):#indices:\n",
    "    row = df.iloc[i,:]\n",
    "    if row[\"Activity\"] in group2list:\n",
    "        for j in range(6,14):\n",
    "            df.iloc[i,j]=1\n",
    "            \n",
    "# Activities 14-16\n",
    "group4 = revRates.iloc[13:16,:]\n",
    "group4list = group4[\"Activity\"].tolist()\n",
    "for i in indices:\n",
    "    row = df.iloc[i,:]\n",
    "    if row[\"Activity\"] in group4list:\n",
    "        for j in range(6,14):\n",
    "            df.iloc[i,j]=1            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Activities 11-13\n",
    "group3 = revRates.iloc[10:13,:]\n",
    "group3list = group3[\"Activity\"].tolist()\n",
    "for i in indices:\n",
    "    row = df.iloc[i,:]\n",
    "    if row[\"Activity\"] in group3list:\n",
    "        for j in range(6,15):\n",
    "            df.iloc[i,j]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Indnum</th>\n",
       "      <th>Activity</th>\n",
       "      <th>Quality_of_Life_Importance__1_10</th>\n",
       "      <th>Carbon_Usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Household heating =&gt; 70F</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Household heating &lt; 70F</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Use of heat pump (negative CF)</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Use of air conditioner</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>shower - short</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Indnum                        Activity  Quality_of_Life_Importance__1_10  \\\n",
       "0       1        Household heating => 70F                              88.0   \n",
       "1       1         Household heating < 70F                              85.0   \n",
       "2       1  Use of heat pump (negative CF)                              50.0   \n",
       "3       1          Use of air conditioner                              45.0   \n",
       "4       1                  shower - short                              98.0   \n",
       "\n",
       "   Carbon_Usage  \n",
       "0             0  \n",
       "1             0  \n",
       "2             0  \n",
       "3             0  \n",
       "4             0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating Carbon Footprint\n",
    "# New sheet with IndNum, Activity, Quality of Life Importance, Carbon Footprint\n",
    "carbon = df[[\"Indnum\", \"Activity\", \"Quality_of_Life_Importance__1_10\"]]\n",
    "carbon.insert(3, \"Carbon_Usage\", 0)\n",
    "carbon.head()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Xirailuyo\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:2957: RuntimeWarning: Mean of empty slice.\n",
      "  out=out, **kwargs)\n",
      "C:\\Users\\Xirailuyo\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:80: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n",
      "C:\\Users\\Xirailuyo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:13: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  del sys.path[0]\n"
     ]
    }
   ],
   "source": [
    "# filling any NaN values with 0\n",
    "# this may cause some divisions by 0 (warning below); python handles them\n",
    "revRates = revRates.fillna(0)\n",
    "df = df.fillna(0)\n",
    "\n",
    "# this is calculating the carbon usage for every activity up to 16\n",
    "for i in range(len(df.index)):\n",
    "    dfrow = df.iloc[i,:]\n",
    "    activity = dfrow[\"Activity\"]\n",
    "    ratesrow = revRates.loc[revRates[\"Activity\"]==activity,:].T\n",
    "    a = dfrow[6:-1].values\n",
    "    b = ratesrow[1:-1].values\n",
    "    c = []\n",
    "    for j in range(len(a)):\n",
    "        c.append(a[j]*b[j])\n",
    "        convRate = np.mean([k for k in c if (k >= .000001 or k < -.000001)]) # multiply value to get carbon_usage\n",
    "        carbon.iloc[i,3] = convRate * df.iloc[i,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "revRates.head()\n",
    "\n",
    "# these are calculations for activities 17-27, as they only have one conversion rate\n",
    "# a plane doesn't use solar power for instance\n",
    "for i in range(16, len(df.index), 27):\n",
    "    carbon.iloc[i,3] = df.iloc[i,4] * revRates.iloc[16,10]\n",
    "    carbon.iloc[i+1,3] = df.iloc[i+1,4] * revRates.iloc[17,10]\n",
    "    carbon.iloc[i+2,3] = df.iloc[i+2,4] * revRates.iloc[18,5]\n",
    "    carbon.iloc[i+3,3] = df.iloc[i+3,4] * revRates.iloc[19,5]\n",
    "    carbon.iloc[i+4,3] = df.iloc[i+4,4] * revRates.iloc[20,5]\n",
    "    carbon.iloc[i+5,3] = df.iloc[i+5,4] * revRates.iloc[21,5]\n",
    "    carbon.iloc[i+6,3] = df.iloc[i+6,4] * .0419\n",
    "    carbon.iloc[i+7,3] = df.iloc[i+7,4] * -.0419\n",
    "    carbon.iloc[i+8,3] = df.iloc[i+8,4] * -.0419\n",
    "    carbon.iloc[i+9,3] = df.iloc[i+9,4] * .0211\n",
    "    carbon.iloc[i+10,3] = df.iloc[i+10,4] * .0211"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x193e1f71898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Indnum</th>\n",
       "      <th>Activity</th>\n",
       "      <th>Quality_of_Life_Importance__1_10</th>\n",
       "      <th>Carbon_Usage</th>\n",
       "      <th>Difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>6</td>\n",
       "      <td>large items disposed</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.021100</td>\n",
       "      <td>-63.807376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6</td>\n",
       "      <td>use of self-clean feature of electric oven</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.001458</td>\n",
       "      <td>-42.552302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>6</td>\n",
       "      <td>car trips - driver and self</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.011634</td>\n",
       "      <td>-34.154084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>6</td>\n",
       "      <td>TV/computer use</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.000344</td>\n",
       "      <td>-23.062858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6</td>\n",
       "      <td>use of  oven</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>-21.073188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>6</td>\n",
       "      <td>trips using public ground transportation</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.003864</td>\n",
       "      <td>-6.767852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>6</td>\n",
       "      <td>Household heating =&gt; 70F</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0.009639</td>\n",
       "      <td>-2.487349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>6</td>\n",
       "      <td>Household heating &lt; 70F</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.002616</td>\n",
       "      <td>18.900361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>6</td>\n",
       "      <td>shower - short</td>\n",
       "      <td>97.0</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>43.873203</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Indnum                                    Activity  \\\n",
       "161       6                        large items disposed   \n",
       "148       6  use of self-clean feature of electric oven   \n",
       "154       6                 car trips - driver and self   \n",
       "150       6                             TV/computer use   \n",
       "147       6                                use of  oven   \n",
       "156       6    trips using public ground transportation   \n",
       "135       6                    Household heating => 70F   \n",
       "136       6                     Household heating < 70F   \n",
       "139       6                              shower - short   \n",
       "\n",
       "     Quality_of_Life_Importance__1_10  Carbon_Usage  Difference  \n",
       "161                              17.0      0.021100  -63.807376  \n",
       "148                              12.0      0.001458  -42.552302  \n",
       "154                              34.0      0.011634  -34.154084  \n",
       "150                              30.0      0.000344  -23.062858  \n",
       "147                              33.0      0.001100  -21.073188  \n",
       "156                              51.0      0.003864   -6.767852  \n",
       "135                              63.0      0.009639   -2.487349  \n",
       "136                              75.0      0.002616   18.900361  \n",
       "139                              97.0      0.000392   43.873203  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Linear Regression Analysis on Individual\n",
    "# If quantity or quality is NaN, whole value is discarded (taking average doesn't add any new information and may conceal important insights)\n",
    "\n",
    "ind = 6\n",
    "total = carbon.loc[carbon[\"Indnum\"]==ind].dropna()\n",
    "outliers = total[total[\"Carbon_Usage\"]>.05]\n",
    "indRows = total.loc[total[\"Carbon_Usage\"]<.05] # can be commented out to include above .05, airplanes, air conditioner, etc\n",
    "indRows = indRows.loc[indRows[\"Carbon_Usage\"]>0.0001] # can be commented out to include recycling and compost\n",
    "x = indRows.iloc[:,3].values[:,np.newaxis]\n",
    "y = indRows.iloc[:,2].values\n",
    "# plt.scatter(x,y)\n",
    "# plt.show()\n",
    "\n",
    "# Linear Regression Time\n",
    "model = LinearRegression()\n",
    "model.fit(x, y)\n",
    "\n",
    "plt.scatter(x, y,color='r')\n",
    "plt.plot(x, model.predict(x),color='k')\n",
    "plt.show()\n",
    "\n",
    "# In cases that linear regression was negative, it was mirrored along the x-axis\n",
    "# This was done as the direction of regression wasn't of interest, only the rate of it\n",
    "predict = model.predict(x)\n",
    "base = predict[x.tolist().index(min(x))] # index of lowest x\n",
    "differences = np.absolute(np.subtract(predict, base))\n",
    "predictPos = base + differences\n",
    "diff = y - predictPos\n",
    "\n",
    "indRows\n",
    "indRows[\"Difference\"] = diff\n",
    "indRows.sort_values(\"Difference\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Indnum                  Activity  Quality_of_Life_Importance__1_10  \\\n",
      "151       6  air travel - large plane                              47.0   \n",
      "153       6      car trips- self only                              45.0   \n",
      "157       6  bags of garbage disposed                              47.0   \n",
      "\n",
      "     Carbon_Usage  \n",
      "151     36.175900  \n",
      "153      0.147117  \n",
      "157      0.921800  \n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x193e1f9a4e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# These include outliers and display how far they are from the cluster of data\n",
    "print(outliers)\n",
    "x = total.iloc[:,3].values[:,np.newaxis]\n",
    "y = total.iloc[:,2].values\n",
    "plt.scatter(x, y,color='r')\n",
    "plt.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change number of users as needed\n",
    "users = 1002\n",
    "\n",
    "# creating empty lists for dataframe\n",
    "userList = []\n",
    "QoLList = []\n",
    "CUList = []\n",
    "\n",
    "# creating simple dataframe for use in clustering\n",
    "for i in range(users): \n",
    "    avgRows = carbon.loc[carbon[\"Indnum\"]==i+1].dropna()\n",
    "    QoL = avgRows[\"Quality_of_Life_Importance__1_10\"].mean()\n",
    "    CU = avgRows[\"Carbon_Usage\"].mean()\n",
    "    userList.append(i + 1)\n",
    "    QoLList.append(QoL)\n",
    "    CUList.append(CU)\n",
    "    \n",
    "avgs = pd.DataFrame({\"Indnum\":userList,\"Quality_Of_Life\":QoLList,\"Carbon_Usage\":CUList})\n",
    "avgs = avgs[[\"Indnum\",\"Carbon_Usage\",\"Quality_Of_Life\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAcvJzx8HG3qKAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x193e1860c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Indnum</th>\n",
       "      <th>Carbon_Usage</th>\n",
       "      <th>Quality_Of_Life</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3.380854</td>\n",
       "      <td>39.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3.838680</td>\n",
       "      <td>39.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3.470675</td>\n",
       "      <td>43.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5.212553</td>\n",
       "      <td>42.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4.384821</td>\n",
       "      <td>42.769231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Indnum  Carbon_Usage  Quality_Of_Life\n",
       "0       1      3.380854        39.466667\n",
       "1       2      3.838680        39.750000\n",
       "2       3      3.470675        43.714286\n",
       "3       4      5.212553        42.333333\n",
       "4       5      4.384821        42.769231"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shows clustering\n",
    "# as one can see, there aren't any clear clusters here\n",
    "# I attempted some algorithms just in case, but didn't find any clear divisions\n",
    "# the specifics are noted in the primary document\n",
    "x = avgs.iloc[:,1]\n",
    "y = avgs.iloc[:,2]\n",
    "plt.scatter(x,y)\n",
    "plt.show()\n",
    "avgs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\neTgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x193dfc046d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# this elbow curve was used for k-means, which was unused\n",
    "y = y.to_frame()\n",
    "x = x.to_frame()\n",
    "kmeans = [KMeans(n_clusters=i) for i in Nc]\n",
    "score = [kmeans[i].fit(y).score(y) for i in range(len(kmeans))]\n",
    "\n",
    "pl.plot(Nc,score)\n",
    "pl.xlabel('Number of Clusters')\n",
    "pl.ylabel('Score')\n",
    "pl.title('Elbow Curve')\n",
    "pl.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' \\nK_Means analysis was done in R for visualization purposes,\\nbut ultimately did not provide any further insights into the\\nclustering of individuals. As such, the code was not included\\n'"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avgs.to_csv(\"avgs.csv\")\n",
    "\"\"\" \n",
    "K_Means analysis was done in R for visualization purposes,\n",
    "but ultimately did not provide any further insights into the\n",
    "clustering of individuals. As such, the code was not included\n",
    "\"\"\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
